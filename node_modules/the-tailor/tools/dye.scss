////
/// @group 3. dye.scss
/// @author [@jordanskomer](https://github.com/jordanskomer)
////

$colors: (
  "black": #000000,
  "white": #ffffff,
  "gray": #B3B3B3,
  "light-gray": #E6E6E6,
  "dark-gray": #666666
) !default;

///
/// Returns the HEX value of the passed in color variable.
///
/// Note: Color variable name must exist in the $colors object
///
/// Note: You can use either `palette` or `p`
/// @example
/// border: 1px solid palette(gray);
/// @param {String} $colorName [none] - The name of the color to return the HEX value
@function palette($colorName) {
  @return map-get($colors, $colorName);
}

@function p($colorName) {
  @return palette($colorName);
}

///
/// Generates prefixed classes (expanded on below) in 1% increments from 1 to 100
///
/// &-darken-number- Darkens the color by the number value (where number is 1 - 100)
///
/// &-lighten-number - Ligthens the color by the number value (where number is 1 - 100)
///
/// &-dnumber- Shorthand for the darken function
///
/// &-lnumber - Shorthand for the lighten function
/// @example
/// classwherethemixinwascalled-darken-10: Darkens the passed in color by 10%
/// classwherethemixinwascalled-lighten-5:  Lightens the passed in color by 5%
/// classwherethemixinwascalled-d10: Darkens the passed in color by 10%
/// classwherethemixinwascalled-l5:  Lightens the passed in color by 5%
/// @param {Color} $color [none] - The HEX Color value to lighten and darken
@mixin lighten-and-darken($color) {
  @for $i from 1 through 100 {
    &-darken-#{$i} {
      color: darken($color, $i/100);
    }

    &-d#{$i} {
      color: darken($color, $i/100);
    }

    &-lighten-#{$i} {
      color: lighten($color, $i/100);
    }

    &-l#{$i} {
      color: lighten($color, $i/100);
    }
  }
}

@each $name, $color in $colors {
  ///
  /// The placeholder to extend when you need to set the color of a object.
  ///
  /// Note: You put the color name after the -. The name of the color is the variable you defined
  ///
  /// Note: You can use either `color` or `c` in your @extends.
  /// in the $colors array in options.scss
  /// @example
  /// Default: extend %color-black;
  ///  Darken: extend %color-black-darken-20;
  /// Lighten: extend %color-black-l20;
  %color-#{$name},
  %c-#{$name} {
    color: $color;
    @include lighten-and-darken($color);
  }

  ///
  /// The placeholder to extend when you need to set the border-color of a border.
  ///
  /// Note: You put the color name after the -. The name of the color is the variable you defined
  ///
  /// Note: You can use either `border-color` or `bc` in your @extends.
  /// in the $colors array in options.scss
  /// @example
  /// Default: extend %border-color-black;
  ///  Darken: extend %border-color-black-darken-20;
  /// Lighten: extend %border-color-black-l20;
  %border-color-#{$name},
  %bc-#{$name} {
    border-color: $color;
    @include lighten-and-darken($color);
  }

  ///
  /// The placeholder to extend when you need to set the background color of an object
  ///
  /// Note: You put the color name after the -. The name of the color is the variable you defined
  /// in the $colors array in options.scss
  ///
  /// Note: You can use either `background-color` or `bgc` in your @extends.
  /// @example
  /// Default: extend %background-color-black;
  ///  Darken: extend %background-color-black-darken-20;
  /// Lighten: extend %background-color-black-l20;
  %background-color-#{$name},
  %bgc-#{$name} {
    background-color: $color;
    @include lighten-and-darken($color);
  }
}
