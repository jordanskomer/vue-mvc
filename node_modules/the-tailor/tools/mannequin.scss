////
/// @group 4. mannequin.scss
////

/// Breakpoints should be listed smallest to largest so that they cascade the
/// code in the correct order
$breakpoints: (
  'xs': 30rem,
  'sm': 48rem,
  'md': 64rem,
  'lg': 75rem
) !default;

///
/// A shorthand media query mixin
///
/// Note: This should be called inside of the class you want to modify
/// @example
/// .my-class {
///   width: 50%;
///
///   @include break(sm) {
///     width: 100%;
///   }
/// }
/// @param {String} $point [none] - The name of the breakpoint you want to trigger, should be `sm`, `md`, `lg` or can also be a pixel value such as `1200px`
/// @author [@evanagee](https://github.com/evanagee)
@mixin break($point, $max-min: min) {
  @if $point == full {
    @media screen { @content }
  }
  @if $point == lg {
    @media only screen and (#{$max-min}-width: map-get($breakpoints,'lg') ) { @content }
  }
  @if $point == md {
    @media only screen and (#{$max-min}-width: map-get($breakpoints,'md') ) { @content }
  }
  @if $point == sm {
    @media only screen and (#{$max-min}-width: map-get($breakpoints,'sm') ) { @content }
  }
  @if $point == xs {
    @media only screen and (#{$max-min}-width: map-get($breakpoints,'xs') ) { @content }
  }
  @else {
    @media only screen and (#{$max-min}-width: $point) { @content }
  }
}

///
/// Use this for opacity. This sets the opacity correctly for all browsers.
///
/// @example
///  .remember-that-one-time {
///     @include opacity(.697);
///  }
/// @author [@evanagee](https://github.com/evanagee)
/// @param {Float} $opacity [.5] - Opacity amount.
@mixin opacity($opacity:.5) {
  zoom: 1;
  filter: alpha(opacity=$opacity*100);
  opacity: $opacity;
}

///
/// Used to handle transitions.
///
/// Note: You can use either `transitions` or `trans` in your @include
/// @example
///  .not-kevin-bacon {
///     @include trans(border-color, .5s);
///  }
/// @author [@evanagee](https://github.com/evanagee)
/// @param {String} $selector [all] - The CSS property to transition
/// @param {Time} $duration [2s] - The length of the transition (in seconds)
/// @param {String} $animation [ease-in-out] - The animation timing function
/// @param {Time} $delay [0] - The amount of time before the transition fires (in seconds)
@mixin transitions($selector:all, $duration:.2s, $animation:ease-in-out, $delay:0) {
  -webkit-backface-visibility: hidden; // hack to make Safari transitions smoother
  -webkit-font-smoothing: subpixel-antialiased; // performance improvement in Safari
  @include browser-prefix(transition-property,$selector);
  @include browser-prefix(transition-duration,$duration);
  @include browser-prefix(transition-delay,$delay);
  @include browser-prefix(transition-timing-function,$animation);
}

@mixin trans($selector:all, $duration:.2s, $animation:ease-in-out, $delay:0) {
  @include transitions($selector, $duration, $animation, $delay);
}

//
/// Creates browser-prefixed properties for a given property
///
/// @example
///  .transitions {
///     @include browser-prefix(transition-duration, .5s);
///  }
/// @author [@evanagee](https://github.com/evanagee)
/// @param {String} $property [all] - The CSS property to prefix
/// @param {Mixed} $value [2s] - The value of the property
@mixin browser-prefix($property, $value...) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -o-#{$property}: $value;
  #{$property}: $value;
}

///
/// Makes an element to a certain aspect ratio.
///
/// Note: You can use either `aspect-ratio` or `ar` in your @include
/// @example
///  @include aspect-ratio(16,9);
/// @author [@evanagee](https://github.com/evanagee)
/// @param {Integer} $width [none] - The width of the ratio
/// @param {Integer} $height [none] - The height of the ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin ar($width, $height) {
  @include aspect-ratio($width, $height)
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

///
/// Converts pixel value to rem value, with a fallback for IE8.
///
/// Note: You can use either `font-size` or `fs` in your @include
/// @example
///  @include font-size(16px);
///  @include fs(16px);
/// @author [@jordanskomer](https://github.com/jordanskomer)
@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin fs($size) {
  @include font-size($size);
}

///
/// Helper for the overflow ellipsis. Note: Only works for single line text
///
/// Note: You can use either `overflow-ellipsis` or `oe` in your @extend
/// @example
///  @extend %overflow-ellipsis;
///  @extend %oe;
/// @author [@jordanskomer](https://github.com/jordanskomer)
%overflow-ellipsis,
%oe {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

///
/// Clearfix helper for floated elements.
///
/// Note: You can use either `clearfix` or `cf` in your @extend
/// @example
///  .container-with-floated-children {
///     @extend %clearfix;
///  }
/// @author [@jordanskomer](https://github.com/jordanskomer)
%clearfix,
%cf {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

///
/// Visually hide an element but still let it be visible for screen readers.
///
/// Note: You can use either `visuallyhidden` or `vh` in your @extend
/// @example
/// <button class="mobile-navigation-trigger">
///   <b class="visually-hidden">Open the navigation</b>
///   <img src="img/mobile-navigation-icon.svg">
/// </button>
///
/// .visually-hidden {
///   @extend %visuallyhidden;
/// }
/// @author [@jordanskomer](https://github.com/jordanskomer)
%visuallyhidden,
%vh {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}


///
/// A helper for background image positioning.
///
/// Note: You can use either `background` or `bg` in your @extend
/// @example
///  @extend %background-position-left-top
///  @extend %bg-position-right-top
/// @author [@evanagee](https://github.com/evanagee)
%background-position,
%bg-position {
  &-left-top {
    background-position: left top;
  }

  &-right-top {
    background-position: right top;
  }

  &-left-bottom {
    background-position: left bottom;
  }

  &-right-bottom {
    background-position: right bottom;
  }

  &-left-center {
    background-position: right center;
  }

  &-right-center {
    background-position: right center;
  }
}

///
/// A helper for background image size.
///
/// Note: You can use either `background` or `bg` in your @extend
/// @example
///  @extend %background-fill
///  @extend %bg-fill
///  @extend %background-contain
/// @author [@evanagee](https://github.com/evanagee)
%background,
%bg {
  &-cover,
  &-fill {
    background-size: cover;
  }

  &-contain {
    background-size: contain;
  }
}

.fixed {
  position: fixed;
}
