////
/// @group 6. saint-homobonus.scss
/// @author [@jordanskomer](https://github.com/jordanskomer)
////

$grid__gutter-width: 1rem !default;
$grid__half-gutter-width: $grid__gutter-width / 2 !default;
$grid__gutter-compensation: $grid__half-gutter-width * -1 !default;
$grid__outer-margin: 2rem !default;

.container-fluid, .container {
  margin-right: auto;
  margin-left: auto;
}

%container-fluid, .container-fluid {
  padding-right: $grid__outer-margin;
  padding-left: $grid__outer-margin;
}

///
/// This is the backbone of our grid system. It aligns all of your content according the the breakpoints
/// and keeps the correct margins and padding based on screen sizes.
///
/// @example
/// .container
///   .row
///     .col-1
%container, .container {
  max-width: map-get($breakpoints, 'lg');

  @include break(lg) {
    max-width: 100%;
  }
}

///
/// This sets the flex properties that the columns use. This is the parent container that all columns must be
/// contained in. With the row.reverse the rows are loaded into the container from last to first.
///
/// @example
///   .row
///     .col-md-1
///     .col-md-11
///   .row
///     .col-md-3
///     .col-md-9
%row, .row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $grid__gutter-compensation;
  margin-left: $grid__gutter-compensation;

  &.reverse {
    -ms-flex-direction: row-reverse;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: reverse;
    flex-direction: row-reverse;
  }

  ///
  /// Items are evenly distributed in the row; first item is on the start of the row, last item on the end of the row
  /// For more info check out this [article](https://css-tricks.com/almanac/properties/j/justify-content/)
  /// @example
  /// .row.around
  ///   .col-auto
  ///   .col-xs-2
  %around {} // these are so the sassdocs generate the above snippet (can't use other hacks cause this is inherited)
  &.around{
    -ms-flex-pack: distribute;
    justify-content: space-around;
  }

  ///
  /// Items are evenly distributed in the row with equal space around them
  /// For more info check out this [article](https://css-tricks.com/almanac/properties/j/justify-content/)
  /// @example
  /// .row.between
  ///   .col-auto
  ///   .col-xs-2
  %between {} // these are so the sassdocs generate the above snippet (can't use other hacks cause this is inherited)
  &.between {
    -ms-flex-pack: justify;
    -webkit-box-pack: justify;
    justify-content: space-between;
  }
}

///
/// Loads the columns from last to first, instead of first to last
%col.reverse, .col.reverse {
  -ms-flex-direction: column-reverse;
  -webkit-box-orient: vertical;
  -webkit-box-direction: reverse;
  flex-direction: column-reverse;
}

@mixin generate_columns($breakpoint) {
  .col-#{$breakpoint},
  .col-#{$breakpoint}-1,
  .col-#{$breakpoint}-2,
  .col-#{$breakpoint}-3,
  .col-#{$breakpoint}-4,
  .col-#{$breakpoint}-5,
  .col-#{$breakpoint}-6,
  .col-#{$breakpoint}-7,
  .col-#{$breakpoint}-8,
  .col-#{$breakpoint}-9,
  .col-#{$breakpoint}-10,
  .col-#{$breakpoint}-11,
  .col-#{$breakpoint}-12,
  .col-#{$breakpoint}-1-5,
  .col-#{$breakpoint}-offset-1,
  .col-#{$breakpoint}-offset-2,
  .col-#{$breakpoint}-offset-3,
  .col-#{$breakpoint}-offset-4,
  .col-#{$breakpoint}-offset-5,
  .col-#{$breakpoint}-offset-6,
  .col-#{$breakpoint}-offset-7,
  .col-#{$breakpoint}-offset-8,
  .col-#{$breakpoint}-offset-9,
  .col-#{$breakpoint}-offset-10,
  .col-#{$breakpoint}-offset-11,
  .col-#{$breakpoint}-offset-12 {
    box-sizing: border-box;
    -ms-flex: 0 0 auto;
    -webkit-box-flex: 0;
    display: block;
    flex: 0 0 auto;
    padding-right: $grid__half-gutter-width;
    padding-left: $grid__half-gutter-width;
  }

  .col-#{$breakpoint} {
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
    flex-grow: 1;
    -ms-flex-preferred-size: 0;
    flex-basis: 0;
    max-width: 100%;
  }

  .start-#{$breakpoint} {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start;
    text-align: start;
  }

  .center-#{$breakpoint} {
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    text-align: center;
  }

  .end-#{$breakpoint} {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    justify-content: flex-end;
    text-align: end;
  }

  .top-#{$breakpoint} {
    -webkit-box-align: start;
    -ms-flex-align: start;
    align-items: flex-start;
  }

  .middle-#{$breakpoint} {
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
  }

  .bottom-#{$breakpoint} {
    -webkit-box-align: end;
    -ms-flex-align: end;
    align-items: flex-end;
  }

  .around-#{$breakpoint} {
    -ms-flex-pack: distribute;
    justify-content: space-around;
  }

  .between-#{$breakpoint} {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between;
  }

  .first-#{$breakpoint} {
    -webkit-box-ordinal-group: 0;
    -ms-flex-order: -1;
    order: -1;
  }

  .last-#{$breakpoint} {
    -webkit-box-ordinal-group: 2;
    -ms-flex-order: 1;
    order: 1;
  }

  @for $i from 1 through 12 {
    $col-width: (100/12) * $i * 1%;

    .col-#{$breakpoint}-#{$i} {
      -ms-flex-preferred-size: $col-width;
      flex-basis: $col-width;
      max-width: $col-width;
    }

    .col-#{$breakpoint}-offset-#{$i} {
      margin-left: $col-width;
    }
  }

  .col-#{$breakpoint}-1-5 {
    -ms-flex-preferred-size: 20%;
    flex-basis: 20%;
    max-width: 20%;
  }
}

@each $breakpoint, $size in $breakpoints {
  @include break($breakpoint, max) {
    .hidden-#{$breakpoint} {
      display: none;
    }
  }

  @if $breakpoint != 'xs' {
    @include break($breakpoint) {
      .container {
        width: $size;
      }
      @include generate_columns($breakpoint);
    }
  } @else {
    @include generate_columns($breakpoint);
  }
}


///
/// Text is aligned to the start of the column (or left)
///
/// @example
/// .row
///   .col-xs-2.col-start
%col-breakpoint-start {
  -ms-flex-pack: start;
  -webkit-box-pack: start;
  justify-content: flex-start;
  text-align: start;
}

///
/// Text is aligned to the center of the column
///
/// @example
/// .row
///   .col-xs-2.col-center
%col-breakpoint-center {
  -ms-flex-pack: center;
  -webkit-box-pack: center;
  justify-content: center;
  text-align: center;
}

///
/// Text is aligned to the end of the column (or right)
///
/// @example
/// .row
///   .col-xs-2.col-end
%col-breakpoint-end {
  -ms-flex-pack: end;
  -webkit-box-pack: end;
  justify-content: flex-end;
  text-align: end;
}

///
/// Aligns the column to the top of the row
///
/// @example
/// .row
///   .col-xs-2.col-top
%col-breakpoint-top {
  -ms-flex-align: start;
  -webkit-box-align: start;
  align-items: flex-start;
}

///
/// Aligns the column to the middle (center vertical) of the row
///
/// @example
/// .row
///   .col-xs-2.col-middle
%col-breakpoint-middle {
  -ms-flex-align: center;
  -webkit-box-align: center;
  align-items: center;
}

///
/// Aligns the column to the bottom of the row
///
/// @example
/// .row
///   .col-xs-2.col-bottom
%col-breakpoint-bottom {
  -ms-flex-align: end;
  -webkit-box-align: end;
  align-items: flex-end;
}

///
/// Moves column to the beginning of the row regardless of the position in the DOM.
///
/// @example
/// .row
///   .col-xs-2
///   .col-xs-2.col-first (this gets displayed first in the row)
%col-breakpoint-first {
  -ms-flex-order: -1;
  -webkit-box-ordinal-group: 0;
  order: -1;
}

///
/// Moves column to the end of the row regardless of the position in the DOM.
///
/// @example
/// .row
///   .col-xs-2.col-last (this gets displayed last in the row)
///   .col-xs-2
%col-breakpoint-last {
  -ms-flex-order: 1;
  -webkit-box-ordinal-group: 2;
  order: 1;
}
